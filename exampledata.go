// This code is autmatically generated. Any changes should be made in generate.go.

package main

// Example holds information about documentation examples.
type Example struct {
	PkgName string
	Type    string
	Abbrev  string
  Name    string
	Doc     string
	Code    string
	Img     string
}
var exampleData = map[string][]Example{
    "floats": {
        {PkgName:"floats", Type:"AddConst", Abbrev:"AC", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n)\n\nfunc main() {\n\ts := []float64{1, -2, 3, -4}\n\tc := 5.0\n\n\tfloats.AddConst(c, s)\n\n\tfmt.Println(\"s =\", s)\n\n}\n", Img:""},
        {PkgName:"floats", Type:"Add", Abbrev:"AN", Name:"Newslice", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n)\n\nfunc main() {\n\n\ts1 := []float64{1, 2, 3, 4}\n\ts2 := []float64{5, 6, 7, 8}\n\ts3 := []float64{1, 1, 1, 1}\n\tdst := make([]float64, len(s1))\n\n\tfloats.AddTo(dst, s1, s2)\n\tfloats.Add(dst, s3)\n\n\tfmt.Println(\"dst =\", dst)\n\tfmt.Println(\"s1 =\", s1)\n\tfmt.Println(\"s2 =\", s2)\n\tfmt.Println(\"s3 =\", s3)\n\n}\n", Img:""},
        {PkgName:"floats", Type:"Add", Abbrev:"AS", Name:"Simple", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n)\n\nfunc main() {\n\n\ts1 := []float64{1, 2, 3, 4}\n\ts2 := []float64{5, 6, 7, 8}\n\ts3 := []float64{1, 1, 1, 1}\n\tfloats.Add(s1, s2)\n\tfloats.Add(s1, s3)\n\n\tfmt.Println(\"s1 =\", s1)\n\tfmt.Println(\"s2 =\", s2)\n\tfmt.Println(\"s3 =\", s3)\n\n}\n", Img:""},
        {PkgName:"floats", Type:"Add", Abbrev:"AU", Name:"Unequallengths", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n)\n\nfunc main() {\n\n\ts1 := []float64{1, 2, 3}\n\ts2 := []float64{5, 6, 7, 8}\n\n\teq := floats.EqualLengths(s1, s2)\n\tif eq {\n\t\tfloats.Add(s1, s2)\n\t} else {\n\t\tfmt.Println(\"Unequal lengths\")\n\t}\n\n}\n", Img:""},
        {PkgName:"floats", Type:"CumProd", Abbrev:"CP", Name:"", Doc:"", Code:"package main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := []float64{1, -2, 3, -4}\n\tdst := make([]float64, len(s))\n\n\tfloats.Cumfloats.Prod(dst, s)\n\n\tfmt.Println(\"dst =\", dst)\n\tfmt.Println(\"s =\", s)\n\n}\n", Img:""},
        {PkgName:"floats", Type:"CumSum", Abbrev:"CS", Name:"", Doc:"", Code:"package main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := []float64{1, -2, 3, -4}\n\tdst := make([]float64, len(s))\n\n\tfloats.Cumfloats.Sum(dst, s)\n\n\tfmt.Println(\"dst =\", dst)\n\tfmt.Println(\"s =\", s)\n\n}\n", Img:""},
    },
    "graph/community": {
        {PkgName:"community", Type:"Profile", Abbrev:"PM", Name:"Multiplex", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"sort\"\n\n\t\"github.com/gonum/graph/community\"\n)\n\nfunc main() {\n\n\tg, err := community.NewUndirectedLayers(friends, enemies)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tweights := []float64{1, -1}\n\n\tp, err := community.Profile(community.ModularMultiplexScore(g, weights, true, WeightMultiplex, 10, nil), true, 1e-3, 0.1, 10)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, d := range p {\n\t\tcomm := d.Communities()\n\t\tfor _, c := range comm {\n\t\t\tsort.Sort(ordered.ByID(c))\n\t\t}\n\t\tsort.Sort(ordered.BySliceIDs(comm))\n\t\tfmt.Printf(\"Low:%.2v High:%.2v Score:%v Communities:%v Q=%.3v\\n\",\n\t\t\td.Low, d.High, d.Score, comm, community.QMultiplex(g, comm, weights, []float64{d.Low}))\n\t}\n\n}\n", Img:""},
        {PkgName:"community", Type:"Profile", Abbrev:"PS", Name:"Simple", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"sort\"\n\n\t\"github.com/gonum/graph/community\"\n\t\"github.com/gonum/graph/simple\"\n)\n\nfunc main() {\n\n\tg := simple.NewUndirectedGraph(0, 0)\n\tfor u, e := range smallDumbell {\n\t\tfor v := range e {\n\t\t\tg.SetEdge(simple.Edge{F: simple.Node(u), T: simple.Node(v), W: 1})\n\t\t}\n\t}\n\n\tp, err := community.Profile(community.ModularScore(g, Weight, 10, nil), true, 1e-3, 0.1, 10)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor _, d := range p {\n\t\tcomm := d.Communities()\n\t\tfor _, c := range comm {\n\t\t\tsort.Sort(ordered.ByID(c))\n\t\t}\n\t\tsort.Sort(ordered.BySliceIDs(comm))\n\t\tfmt.Printf(\"Low:%.2v High:%.2v Score:%v Communities:%v Q=%.3v\\n\",\n\t\t\td.Low, d.High, d.Score, comm, community.Q(g, comm, d.Low))\n\t}\n\n}\n", Img:""},
    },
    "integrate/quad": {
        {PkgName:"quad_test", Type:"", Abbrev:"", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"runtime\"\n\t\"github.com/gonum/integrate/quad\"\n\t\"github.com/gonum/stat/distuv\"\n)\n\nfunc main() {\n\tfmt.Println(\"Evaluate the expected value of x^2 + 3 under a Weibull distribution\")\n\tf := func(x float64) float64 {\n\t\td := distuv.Weibull{Lambda: 1, K: 1.5}\n\t\treturn (x*x + 3) * d.Prob(x)\n\t}\n\tev := quad.Fixed(f, 0, math.Inf(1), 10, nil, 0)\n\tfmt.Printf(\"EV with 10 points = %0.6v\\n\", ev)\n\n\tev = quad.Fixed(f, 0, math.Inf(1), 30, nil, 0)\n\tfmt.Printf(\"EV with 30 points = %0.6v\\n\", ev)\n\n\tev = quad.Fixed(f, 0, math.Inf(1), 100, nil, 0)\n\tfmt.Printf(\"EV with 100 points = %0.6v\\n\", ev)\n\n\tev = quad.Fixed(f, 0, math.Inf(1), 10000, nil, 0)\n\tfmt.Printf(\"EV with 10000 points = %0.6v\\n\\n\", ev)\n\n\tfmt.Println(\"Estimate using parallel evaluations of f.\")\n\tconcurrent := runtime.GOMAXPROCS(0)\n\tev = quad.Fixed(f, 0, math.Inf(1), 100, nil, concurrent)\n\tfmt.Printf(\"EV = %0.6v\\n\", ev)\n}\n", Img:""},
    },
    "matrix/mat64": {
        {PkgName:"mat64_test", Type:"Cholesky", Abbrev:"C", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/matrix/mat64\"\n)\n\nfunc main() {\n\t// Construct a symmetric positive definite matrix.\n\ttmp := mat64.NewDense(4, 4, []float64{\n\t\t2, 6, 8, -4,\n\t\t1, 8, 7, -2,\n\t\t2, 2, 1, 7,\n\t\t8, -2, -2, 1,\n\t})\n\tvar a mat64.SymDense\n\ta.SymOuterK(1, tmp)\n\n\tfmt.Printf(\"a = %0.4v\\n\", mat64.Formatted(&a, mat64.Prefix(\"    \")))\n\n\t// Compute the cholesky factorization.\n\tvar chol mat64.Cholesky\n\tif ok := chol.Factorize(&a); !ok {\n\t\tfmt.Println(\"a matrix is not positive semi-definite.\")\n\t}\n\n\t// Find the determinant.\n\tfmt.Printf(\"\\nThe determinant of a is %0.4g\\n\\n\", chol.Det())\n\n\t// Use the factorization to solve the system of equations a * x = b.\n\tb := mat64.NewVector(4, []float64{1, 2, 3, 4})\n\tvar x mat64.Vector\n\tif err := x.SolveCholeskyVec(&chol, b); err != nil {\n\t\tfmt.Println(\"Matrix is near singular: \", err)\n\t}\n\tfmt.Println(\"Solve a * x = b\")\n\tfmt.Printf(\"x = %0.4v\\n\", mat64.Formatted(&x, mat64.Prefix(\"    \")))\n\n\t// Extract the factorization and check that it equals the original matrix.\n\tvar t mat64.TriDense\n\tt.LFromCholesky(&chol)\n\tvar test mat64.Dense\n\ttest.Mul(&t, t.T())\n\tfmt.Println()\n\tfmt.Printf(\"L * L^T = %0.4v\\n\", mat64.Formatted(&a, mat64.Prefix(\"          \")))\n\n}\n", Img:""},
        {PkgName:"mat64_test", Type:"CholeskySymRankOne", Abbrev:"CSRO", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"github.com/gonum/matrix/mat64\"\n\t\"fmt\"\n)\n\nfunc main() {\n\ta := mat64.NewSymDense(4, []float64{\n\t\t1, 1, 1, 1,\n\t\t0, 2, 3, 4,\n\t\t0, 0, 6, 10,\n\t\t0, 0, 0, 20,\n\t})\n\tfmt.Printf(\"A = %0.4v\\n\", mat64.Formatted(a, mat64.Prefix(\"    \")))\n\n\t// Compute the Cholesky factorization.\n\tvar chol mat64.Cholesky\n\tif ok := chol.Factorize(a); !ok {\n\t\tfmt.Println(\"matrix a is not positive definite.\")\n\t}\n\n\tx := mat64.NewVector(4, []float64{0, 0, 0, 1})\n\tfmt.Printf(\"\\nx = %0.4v\\n\", mat64.Formatted(x, mat64.Prefix(\"    \")))\n\n\t// Rank-1 update the factorization.\n\tchol.SymRankOne(&chol, 1, x)\n\t// Rank-1 update the matrix a.\n\ta.SymRankOne(a, 1, x)\n\n\tvar au mat64.SymDense\n\tau.FromCholesky(&chol)\n\n\t// Print the matrix that was updated directly.\n\tfmt.Printf(\"\\nA' =        %0.4v\\n\", mat64.Formatted(a, mat64.Prefix(\"            \")))\n\t// Print the matrix recovered from the factorization.\n\tfmt.Printf(\"\\nU'^T * U' = %0.4v\\n\", mat64.Formatted(&au, mat64.Prefix(\"            \")))\n\n}\n", Img:""},
        {PkgName:"mat64_test", Type:"Excerpt", Abbrev:"E", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/matrix/mat64\"\n)\n\nfunc main() {\n\t// Excerpt allows diagnostic display of very large\n\t// matrices and vectors.\n\n\t// The big matrix is too large to properly print...\n\tbig := mat64.NewDense(100, 100, nil)\n\tfor i := 0; i < 100; i++ {\n\t\tbig.Set(i, i, 1)\n\t}\n\n\t// so only print corner excerpts of the matrix.\n\tfmt.Printf(\"excerpt big identity matrix: %v\\n\\n\",\n\t\tmat64.Formatted(big, mat64.Prefix(\" \"), mat64.Excerpt(3)))\n\n\t// The long vector is also too large, ...\n\tlong := mat64.NewVector(100, nil)\n\tfor i := 0; i < 100; i++ {\n\t\tlong.SetVec(i, float64(i))\n\t}\n\n\t// ... so print end excerpts of the vector,\n\tfmt.Printf(\"excerpt long column vector: %v\\n\\n\",\n\t\tmat64.Formatted(long, mat64.Prefix(\" \"), mat64.Excerpt(3)))\n\t// or its transpose.\n\tfmt.Printf(\"excerpt long row vector: %v\\n\",\n\t\tmat64.Formatted(long.T(), mat64.Prefix(\" \"), mat64.Excerpt(3)))\n\n}\n", Img:""},
        {PkgName:"mat64_test", Type:"Formatted", Abbrev:"F", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/matrix/mat64\"\n)\n\nfunc main() {\n\ta := mat64.NewDense(3, 3, []float64{1, 2, 3, 0, 4, 5, 0, 0, 6})\n\n\t// Create a matrix formatting value with a prefix and calculating each column\n\t// width individually...\n\tfa := mat64.Formatted(a, mat64.Prefix(\"    \"), mat64.Squeeze())\n\n\t// and then print with and without zero value elements.\n\tfmt.Printf(\"with all values:\\na = %v\\n\\n\", fa)\n\tfmt.Printf(\"with only non-zero values:\\na = % v\\n\\n\", fa)\n\n\t// Modify the matrix...\n\ta.Set(0, 2, 0)\n\n\t// and print it without zero value elements.\n\tfmt.Printf(\"after modification with only non-zero values:\\na = % v\\n\\n\", fa)\n\n\t// Modify the matrix again...\n\ta.Set(0, 2, 123.456)\n\n\t// and print it using scientific notation for large exponents.\n\tfmt.Printf(\"after modification with scientific notation:\\na = %.2g\\n\\n\", fa)\n\t// See golang.org/pkg/fmt/ floating-point verbs for a comprehensive list.\n\n}\n", Img:""},
        {PkgName:"mat64_test", Type:"SymDense", Abbrev:"SDSS", Name:"SubsetSym", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/matrix/mat64\"\n)\n\nfunc main() {\n\tn := 5\n\ts := mat64.NewSymDense(5, nil)\n\tcount := 1.0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i; j < n; j++ {\n\t\t\ts.SetSym(i, j, count)\n\t\t\tcount++\n\t\t}\n\t}\n\tfmt.Println(\"Original matrix:\")\n\tfmt.Printf(\"%0.4v\\n\\n\", mat64.Formatted(s))\n\n\t// Take the subset {0, 2, 4}\n\tvar sub mat64.SymDense\n\tsub.SubsetSym(s, []int{0, 2, 4})\n\tfmt.Println(\"Subset {0, 2, 4}\")\n\tfmt.Printf(\"%0.4v\\n\\n\", mat64.Formatted(&sub))\n\n\t// Take the subset {0, 0, 4}\n\tsub.SubsetSym(s, []int{0, 0, 4})\n\tfmt.Println(\"Subset {0, 0, 4}\")\n\tfmt.Printf(\"%0.4v\\n\\n\", mat64.Formatted(&sub))\n\n}\n", Img:""},
    },
    "stat/sampleuv": {
        {PkgName:"sampleuv", Type:"MetropolisHastings", Abbrev:"MHB", Name:"Burnin", Doc:"", Code:"package main\n\nimport \"github.com/gonum/stat/distuv\"\n\ntype ProposalDist struct {\n\tSigma float64\n}\n\nfunc (p ProposalDist) ConditionalRand(y float64) float64 {\n\treturn distuv.Normal{Mu: y, Sigma: p.Sigma}.Rand()\n}\n\nfunc (p ProposalDist) ConditionalLogProb(x, y float64) float64 {\n\treturn distuv.Normal{Mu: y, Sigma: p.Sigma}.LogProb(x)\n}\n\nfunc main() {\n\tn := 1000\t// The number of samples to generate.\n\tburnin := 50\t// Number of samples to ignore at the start.\n\tvar initial float64\n\t// target is the distribution from which we would like to sample.\n\ttarget := distuv.Weibull{K: 5, Lambda: 0.5}\n\t// proposal is the proposal distribution. Here, we are choosing\n\t// a tight Gaussian distribution around the current location. In\n\t// typical problems, if Sigma is too small, it takes a lot of samples\n\t// to move around the distribution. If Sigma is too large, it can be hard\n\t// to find acceptable samples.\n\tproposal := ProposalDist{Sigma: 0.2}\n\n\tsamples := make([]float64, n+burnin)\n\tMetropolisHastings(samples, initial, target, proposal, nil)\n\n\t// Remove the initial samples through slicing.\n\tsamples = samples[burnin:]\n}\n", Img:""},
        {PkgName:"sampleuv", Type:"MetropolisHastings", Abbrev:"MHSR", Name:"SamplingRate", Doc:"", Code:"package main\n\nimport \"github.com/gonum/stat/distuv\"\n\nfunc max(a, b int) int {\n\tif a < b {\n\t\treturn b\n\t}\n\treturn a\n}\n\nfunc main() {\n\t// See Burnin example for a description of these quantities.\n\tn := 1000\n\tburnin := 300\n\tvar initial float64\n\ttarget := distuv.Weibull{K: 5, Lambda: 0.5}\n\tproposal := ProposalDist{Sigma: 0.2}\n\n\t// Successive samples are correlated with one another through the\n\t// Markov Chain defined by the proposal distribution. To get less\n\t// correlated samples, one may use a sampling rate, in which only\n\t// one sample from every few is accepted from the chain. This can\n\t// be accomplished through a for loop.\n\trate := 50\n\n\ttmp := make([]float64, max(rate, burnin))\n\n\t// First deal with burnin.\n\ttmp = tmp[:burnin]\n\tMetropolisHastings(tmp, initial, target, proposal, nil)\n\t// The final sample in tmp in the final point in the chain.\n\t// Use it as the new initial location.\n\tinitial = tmp[len(tmp)-1]\n\n\t// Now, generate samples by using one every rate samples.\n\ttmp = tmp[:rate]\n\tsamples := make([]float64, n)\n\tsamples[0] = initial\n\tfor i := 1; i < len(samples); i++ {\n\t\tMetropolisHastings(tmp, initial, target, proposal, nil)\n\t\tinitial = tmp[len(tmp)-1]\n\t\tsamples[i] = initial\n\t}\n}\n", Img:""},
    },
    "plot/palette/moreland": {
        {PkgName:"moreland", Type:"", Abbrev:"", Name:"", Doc:"This Example gives examples of plots using the palettes in this package.\nThe output can be found at\nhttps://github.com/gonum/plot/blob/master/palette/moreland/testdata/moreland_golden.png.\n", Code:"package main\n\nimport (\n\t\"log\"\n\t\"math\"\n\t\"os\"\n\n\t\"github.com/gonum/matrix/mat64\"\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/palette\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgimg\"\n)\n\nfunc main() {\n\tm := offsetUnitGrid{\n\t\tXOffset: -50,\n\t\tYOffset: -50,\n\t\tData:    mat64.NewDense(100, 100, nil),\n\t}\n\tfor i := 0; i < 100; i++ {\n\t\tfor j := 0; j < 100; j++ {\n\t\t\tx := float64(i-50) / 10\n\t\t\ty := float64(j-50) / 10\n\t\t\tv := math.Sin(x*x+y*y) / (x*x + y*y)\n\t\t\tm.Data.Set(i, j, v)\n\t\t}\n\t}\n\n\tconst (\n\t\trows = 3\n\t\tcols = 3\n\t)\n\tc := vgimg.New(vg.Points(800), vg.Points(800))\n\tdc := draw.New(c)\n\ttiles := draw.Tiles{\n\t\tRows: rows,\n\t\tCols: cols,\n\t}\n\ttype paletteHolder struct {\n\t\tname string\n\t\tcmap palette.Palette\n\t}\n\tpalettes := []paletteHolder{\n\t\tpaletteHolder{\n\t\t\tname: \"SmoothBlueRed\",\n\t\t\tcmap: moreland.SmoothBlueRed().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"SmoothBlueTan\",\n\t\t\tcmap: moreland.SmoothBlueTan().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"SmoothGreenPurple\",\n\t\t\tcmap: moreland.SmoothGreenPurple().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"SmoothGreenRed\",\n\t\t\tcmap: moreland.SmoothGreenRed().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"SmoothPurpleOrange\",\n\t\t\tcmap: moreland.SmoothPurpleOrange().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"BlackBody\",\n\t\t\tcmap: moreland.BlackBody().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"ExtendedBlackBody\",\n\t\t\tcmap: Extendedmoreland.BlackBody().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"Kindlmann\",\n\t\t\tcmap: moreland.Kindlmann().Palette(255),\n\t\t},\n\t\tpaletteHolder{\n\t\t\tname: \"ExtendedKindlmann\",\n\t\t\tcmap: moreland.Extendedmoreland.Kindlmann().Palette(255),\n\t\t},\n\t}\n\n\tfor i, plte := range palettes {\n\n\t\th := plotter.NewHeatMap(m, plte.cmap)\n\n\t\tp, err := plot.New()\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tp.Title.Text = plte.name\n\n\t\tp.Add(h)\n\n\t\tp.X.Padding = 0\n\t\tp.Y.Padding = 0\n\t\tp.Draw(tiles.At(dc, i%cols, i/cols))\n\t}\n\n\tpngimg := vgimg.PngCanvas{Canvas: c}\n\tf, err := os.Create(\"testdata/moreland.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tif _, err = pngimg.WriteTo(f); err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:"https://raw.githubusercontent.com/gonum/plot/master/palette/moreland/testdata/moreland_golden.png"},
    },
    "plot/plotter": {
        {PkgName:"plotter", Type:"", Abbrev:"", Name:"", Doc:"Draw the plot logo.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tDefaultLineStyle.Width = vg.Points(1)\n\tDefaultGlyphStyle.Radius = vg.Points(3)\n\n\tp.Y.Tick.Marker = plot.ConstantTicks([]plot.Tick{\n\t\t{0, \"0\"}, {0.25, \"\"}, {0.5, \"0.5\"}, {0.75, \"\"}, {1, \"1\"},\n\t})\n\tp.X.Tick.Marker = plot.ConstantTicks([]plot.Tick{\n\t\t{0, \"0\"}, {0.25, \"\"}, {0.5, \"0.5\"}, {0.75, \"\"}, {1, \"1\"},\n\t})\n\n\tpts := plotter.XYs{{0, 0}, {0, 1}, {0.5, 1}, {0.5, 0.6}, {0, 0.6}}\n\tline, err := plotter.NewLine(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tscatter, err := plotter.NewScatter(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(line, scatter)\n\n\tpts = plotter.XYs{{1, 0}, {0.75, 0}, {0.75, 0.75}}\n\tline, err = plotter.NewLine(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tscatter, err = plotter.NewScatter(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(line, scatter)\n\n\tpts = plotter.XYs{{0.5, 0.5}, {1, 0.5}}\n\tline, err = plotter.NewLine(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tscatter, err = plotter.NewScatter(pts)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(line, scatter)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"BarChart", Abbrev:"BC", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\n\tvalues := plotter.Values{0.5, 10, 20, 30}\n\tverticalLabels := []string{\"A\", \"B\", \"C\", \"D\"}\n\thorizontalLabels := []string{\"Label A\", \"Label B\", \"Label C\", \"Label D\"}\n\n\tp1, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tverticalBarChart, err := plotter.NewBarChart(values, 0.5*vg.Centimeter)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp1.Add(verticalBarChart)\n\tp1.NominalX(verticalLabels...)\n\terr = p1.Save(100, 100, \"testdata/verticalBarChart.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp2, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\thorizontalBarChart, err := plotter.NewBarChart(values, 0.5*vg.Centimeter)\n\thorizontalBarChart.Horizontal = true\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp2.Add(horizontalBarChart)\n\tp2.NominalY(horizontalLabels...)\n\terr = p2.Save(100, 100, \"testdata/horizontalBarChart.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgroupA := plotter.Values{20, 35, 30, 35, 27}\n\tgroupB := plotter.Values{25, 32, 34, 20, 25}\n\tgroupC := plotter.Values{12, 28, 15, 21, 8}\n\tgroupD := plotter.Values{30, 42, 6, 9, 12}\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Bar chart\"\n\tp.Y.Label.Text = \"Heights\"\n\n\tw := vg.Points(8)\n\n\tbarsA, err := plotter.NewBarChart(groupA, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsA.Color = color.RGBA{R: 255, A: 255}\n\tbarsA.Offset = -w / 2\n\n\tbarsB, err := plotter.NewBarChart(groupB, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsB.Color = color.RGBA{R: 196, G: 196, A: 255}\n\tbarsB.Offset = w / 2\n\n\tbarsC, err := plotter.NewBarChart(groupC, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsC.XMin = 6\n\tbarsC.Color = color.RGBA{B: 255, A: 255}\n\tbarsC.Offset = -w / 2\n\n\tbarsD, err := plotter.NewBarChart(groupD, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsD.Color = color.RGBA{B: 255, R: 255, A: 255}\n\tbarsD.XMin = 6\n\tbarsD.Offset = w / 2\n\n\tp.Add(barsA, barsB, barsC, barsD)\n\tp.Legend.Add(\"A\", barsA)\n\tp.Legend.Add(\"B\", barsB)\n\tp.Legend.Add(\"C\", barsC)\n\tp.Legend.Add(\"D\", barsD)\n\tp.Legend.Top = true\n\tp.NominalX(\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"\",\n\t\t\"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\")\n\n\tp.Add(plotter.NewGlyphBoxes())\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp, err = plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Bar chart\"\n\tp.Y.Label.Text = \"Heights\"\n\n\tw = vg.Points(15)\n\n\tbarsA, err = plotter.NewBarChart(groupA, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsA.Color = color.RGBA{R: 255, A: 255}\n\tbarsA.Offset = -w / 2\n\n\tbarsB, err = plotter.NewBarChart(groupB, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsB.Color = color.RGBA{R: 196, G: 196, A: 255}\n\tbarsB.StackOn(barsA)\n\n\tbarsC, err = plotter.NewBarChart(groupC, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsC.Offset = w / 2\n\tbarsC.Color = color.RGBA{B: 255, A: 255}\n\n\tbarsD, err = plotter.NewBarChart(groupD, w)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbarsD.StackOn(barsC)\n\tbarsD.Color = color.RGBA{B: 255, R: 255, A: 255}\n\n\tp.Add(barsA, barsB, barsC, barsD)\n\tp.Legend.Add(\"A\", barsA)\n\tp.Legend.Add(\"B\", barsB)\n\tp.Legend.Add(\"C\", barsC)\n\tp.Legend.Add(\"D\", barsD)\n\tp.Legend.Top = true\n\tp.NominalX(\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"\",\n\t\t\"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\")\n\n\tp.Add(plotter.NewGlyphBoxes())\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"BarChart", Abbrev:"BCPN", Name:"PositiveNegative", Doc:"This example shows a bar chart with both positive and negative values.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\t// Create random data points between -1 and 1.\n\tconst n = 6\n\tdata1 := make(Values, n)\n\tdata2 := make(Values, n)\n\tnet := make(XYs, n)\n\tfor i := 0; i < n; i++ {\n\t\tdata1[i] = rnd.Float64()*2 - 1\n\t\tdata2[i] = rnd.Float64()*2 - 1\n\t\tnet[i].X = data1[i] + data2[i]\n\t\tnet[i].Y = float64(i)\n\t}\n\n\tsplitBySign := func(d Values) (pos, neg Values) {\n\t\tpos = make(Values, len(d))\n\t\tneg = make(Values, len(d))\n\t\tfor i, v := range d {\n\t\t\tif v > 0 {\n\t\t\t\tpos[i] = v\n\t\t\t} else {\n\t\t\t\tneg[i] = v\n\t\t\t}\n\t\t}\n\t\treturn\n\t}\n\n\tdata1Pos, data1Neg := splitBySign(data1)\n\tdata2Pos, data2Neg := splitBySign(data2)\n\n\tconst barWidth = 0.3 * vg.Centimeter\n\tpos1, err := plotter.NewBarChart(data1Pos, barWidth)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tpos2, err := plotter.NewBarChart(data2Pos, barWidth)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tneg1, err := plotter.NewBarChart(data1Neg, barWidth)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tneg2, err := plotter.NewBarChart(data2Neg, barWidth)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tnetDots, err := plotter.NewScatter(net)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tnetDots.Radius = vg.Points(1.25)\n\n\tpos2.StackOn(pos1)\n\tneg2.StackOn(neg1)\n\n\tcolor1 := color.NRGBA{R: 112, G: 22, B: 0, A: 255}\n\tcolor2 := color.NRGBA{R: 91, G: 194, B: 54, A: 100}\n\n\tpos1.Color, neg1.Color = color1, color1\n\tpos2.Color, neg2.Color = color2, color2\n\n\tpos1.Horizontal, pos2.Horizontal, neg1.Horizontal, neg2.Horizontal = true, true, true, true\n\n\tzero, err := plotter.NewLine(plotter.XYs{{0, 0}, {0, 5}})\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(zero, pos1, pos2, neg1, neg2, netDots)\n\tp.NominalY(\"Alpha\", \"Bravo\", \"Charlie\", \"Echo\", \"Foxtrot\", \"Golf\")\n\n\tp.Legend.Add(\"1\", pos1)\n\tp.Legend.Add(\"2\", pos2)\n\tp.Legend.Add(\"Sum\", netDots)\n\tp.Legend.Left = true\n\tp.Legend.ThumbnailWidth = 2 * vg.Millimeter\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"BoxPlot", Abbrev:"BP", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\tn := 100\n\tuniform := make(ValueLabels, n)\n\tnormal := make(ValueLabels, n)\n\texpon := make(ValueLabels, n)\n\tfor i := 0; i < n; i++ {\n\t\tuniform[i].Value = rnd.Float64()\n\t\tuniform[i].Label = fmt.Sprintf(\"%4.4f\", uniform[i].Value)\n\t\tnormal[i].Value = rnd.NormFloat64()\n\t\tnormal[i].Label = fmt.Sprintf(\"%4.4f\", normal[i].Value)\n\t\texpon[i].Value = rnd.ExpFloat64()\n\t\texpon[i].Label = fmt.Sprintf(\"%4.4f\", expon[i].Value)\n\t}\n\n\tuniBox, err := plotter.NewBoxPlot(vg.Points(20), 0, uniform)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tnormBox, err := plotter.NewBoxPlot(vg.Points(20), 1, normal)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\texpBox, err := plotter.NewBoxPlot(vg.Points(20), 2, expon)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tuniLabels, err := uniBox.OutsideLabels(uniform)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tnormLabels, err := normBox.OutsideLabels(normal)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\texpLabels, err := expBox.OutsideLabels(expon)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp1, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp1.Title.Text = \"Vertical Box Plot\"\n\tp1.Y.Label.Text = \"plotter.Values\"\n\tp1.Add(uniBox, uniLabels, normBox, normLabels, expBox, expLabels)\n\n\tp1.NominalX(\"Uniform\\nDistribution\", \"Normal\\nDistribution\",\n\t\t\"Exponential\\nDistribution\")\n\n\terr = p1.Save(200, 200, \"testdata/verticalBoxPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tnormBox.Horizontal = true\n\texpBox.Horizontal = true\n\tuniBox.Horizontal = true\n\n\tuniLabels, err = uniBox.OutsideLabels(uniform)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tnormLabels, err = normBox.OutsideLabels(normal)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\texpLabels, err = expBox.OutsideLabels(expon)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp2, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp2.Title.Text = \"Horizontal Box Plot\"\n\tp2.X.Label.Text = \"plotter.Values\"\n\n\tp2.Add(uniBox, uniLabels, normBox, normLabels, expBox, expLabels)\n\n\tp2.NominalY(\"Uniform\\nDistribution\", \"Normal\\nDistribution\",\n\t\t\"Exponential\\nDistribution\")\n\n\terr = p2.Save(200, 200, \"testdata/horizontalBoxPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp3, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp3.Title.Text = \"Box Plot\"\n\tp3.Y.Label.Text = \"plotter.Values\"\n\n\tw := vg.Points(20)\n\tfor x := 0.0; x < 3.0; x++ {\n\t\tb0, err := plotter.NewBoxPlot(w, x, uniform)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb0.Offset = -w - vg.Points(3)\n\t\tb1, err := plotter.NewBoxPlot(w, x, normal)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb2, err := plotter.NewBoxPlot(w, x, expon)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb2.Offset = w + vg.Points(3)\n\t\tp3.Add(b0, b1, b2)\n\t}\n\n\tp3.Add(plotter.NewGlyphBoxes())\n\n\tp3.NominalX(\"Group 0\", \"Group 1\", \"Group 2\")\n\terr = p3.Save(300, 300, \"testdata/groupedBoxPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Bubbles", Abbrev:"B", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\trandomTriples := func(n int) XYZs {\n\t\tdata := make(XYZs, n)\n\t\tfor i := range data {\n\t\t\tif i == 0 {\n\t\t\t\tdata[i].X = rnd.Float64()\n\t\t\t} else {\n\t\t\t\tdata[i].X = data[i-1].X + 2*rnd.Float64()\n\t\t\t}\n\t\t\tdata[i].Y = data[i].X + 10*rnd.Float64()\n\t\t\tdata[i].Z = data[i].X\n\t\t}\n\t\treturn data\n\t}\n\n\tn := 10\n\tbubbleData := randomTriples(n)\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Bubbles\"\n\tp.X.Label.Text = \"X\"\n\tp.Y.Label.Text = \"Y\"\n\n\tbs, err := plotter.NewBubbles(bubbleData, vg.Points(1), vg.Points(20))\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbs.Color = color.RGBA{R: 196, B: 128, A: 255}\n\tp.Add(bs)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Errors", Abbrev:"E", Name:"", Doc:"ExampleErrors draws points and error bars.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\trandomError := func(n int) Errors {\n\t\terr := make(Errors, n)\n\t\tfor i := range err {\n\t\t\terr[i].Low = rnd.Float64()\n\t\t\terr[i].High = rnd.Float64()\n\t\t}\n\t\treturn err\n\t}\n\n\trandomPoints := func(n int) XYs {\n\t\tpts := make(XYs, n)\n\t\tfor i := range pts {\n\t\t\tif i == 0 {\n\t\t\t\tpts[i].X = rnd.Float64()\n\t\t\t} else {\n\t\t\t\tpts[i].X = pts[i-1].X + rnd.Float64()\n\t\t\t}\n\t\t\tpts[i].Y = pts[i].X + 10*rnd.Float64()\n\t\t}\n\t\treturn pts\n\t}\n\n\ttype errPoints struct {\n\t\tXYs\n\t\tYErrors\n\t\tXErrors\n\t}\n\n\tn := 15\n\tdata := errPoints{\n\t\tXYs:     randomPoints(n),\n\t\tYErrors: YErrors(randomError(n)),\n\t\tXErrors: XErrors(randomError(n)),\n\t}\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tscatter, err := plotter.NewScatter(data)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tscatter.Shape = draw.CrossGlyph{}\n\txerrs, err := plotter.NewXErrorBars(data)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tyerrs, err := plotter.NewYErrorBars(data)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(scatter, xerrs, yerrs)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Function", Abbrev:"F", Name:"", Doc:"ExampleFunction draws some functions.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tquad := plotter.NewFunction(func(x float64) float64 { return x * x })\n\tquad.Color = color.RGBA{B: 255, A: 255}\n\n\texp := plotter.NewFunction(func(x float64) float64 { return math.Pow(2, x) })\n\texp.Dashes = []vg.Length{vg.Points(2), vg.Points(2)}\n\texp.Width = vg.Points(2)\n\texp.Color = color.RGBA{G: 255, A: 255}\n\n\tsin := plotter.NewFunction(func(x float64) float64 { return 10*math.Sin(x) + 50 })\n\tsin.Dashes = []vg.Length{vg.Points(4), vg.Points(5)}\n\tsin.Width = vg.Points(4)\n\tsin.Color = color.RGBA{R: 255, A: 255}\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp.Title.Text = \"Functions\"\n\tp.X.Label.Text = \"X\"\n\tp.Y.Label.Text = \"Y\"\n\n\tp.Add(quad, exp, sin)\n\tp.Legend.Add(\"x^2\", quad)\n\tp.Legend.Add(\"2^x\", exp)\n\tp.Legend.Add(\"10*sin(x)+50\", sin)\n\tp.Legend.ThumbnailWidth = 0.5 * vg.Inch\n\n\tp.X.Min = 0\n\tp.X.Max = 10\n\tp.Y.Min = 0\n\tp.Y.Max = 100\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"HeatMap", Abbrev:"HM", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\n\t\"github.com/gonum/matrix/mat64\"\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/palette\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tm := offsetUnitplotter.Grid{\n\t\tXOffset: -2,\n\t\tYOffset: -1,\n\t\tData: mat64.NewDense(3, 4, []float64{\n\t\t\t1, 2, 3, 4,\n\t\t\t5, 6, 7, 8,\n\t\t\t9, 10, 11, 12,\n\t\t})}\n\th := plotter.NewHeatMap(m, palette.Heat(12, 1))\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Heat map\"\n\n\tp.Add(h)\n\n\tp.X.Padding = 0\n\tp.Y.Padding = 0\n\tp.X.Max = 1.5\n\tp.Y.Max = 1.5\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Histogram", Abbrev:"H", Name:"", Doc:"An example of making a histogram.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\tstdNorm := func(x float64) float64 {\n\t\tconst sigma = 1.0\n\t\tconst mu = 0.0\n\t\tconst root2π = 2.50662827459517818309\n\t\treturn 1.0 / (sigma * root2π) * math.Exp(-((x-mu)*(x-mu))/(2*sigma*sigma))\n\t}\n\n\tn := 10000\n\tvals := make(Values, n)\n\tfor i := 0; i < n; i++ {\n\t\tvals[i] = rnd.NormFloat64()\n\t}\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Histogram\"\n\th, err := plotter.NewHist(vals, 16)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\th.Normalize(1)\n\tp.Add(h)\n\n\tnorm := plotter.NewFunction(stdNorm)\n\tnorm.Color = color.RGBA{R: 255, A: 255}\n\tnorm.Width = vg.Points(2)\n\tp.Add(norm)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Image", Abbrev:"I", Name:"", Doc:"An example of embedding an image in a plot.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/png\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\\n\", err)\n\t}\n\tp.Title.Text = \"A Logo\"\n\n\tf, err := os.Open(\"testdata/image_plot_input.png\")\n\tif err != nil {\n\t\tlog.Fatalf(\"error opening image file: %v\\n\", err)\n\t}\n\tdefer f.Close()\n\n\timg, err := png.Decode(f)\n\tif err != nil {\n\t\tlog.Fatalf(\"error decoding image file: %v\\n\", err)\n\t}\n\n\tp.Add(plotter.NewImage(img, 100, 100, 200, 200))\n\n\tconst (\n\t\tw = 5 * vg.Centimeter\n\t\th = 5 * vg.Centimeter\n\t)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error saving image plot: %v\\n\", err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"QuartPlot", Abbrev:"QP", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\tn := 100\n\tuniform := make(Values, n)\n\tnormal := make(Values, n)\n\texpon := make(Values, n)\n\tfor i := 0; i < n; i++ {\n\t\tuniform[i] = rnd.Float64()\n\t\tnormal[i] = rnd.NormFloat64()\n\t\texpon[i] = rnd.ExpFloat64()\n\t}\n\n\tqp1, err := plotter.NewQuartPlot(0, uniform)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tqp2, err := plotter.NewQuartPlot(1, normal)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tqp3, err := plotter.NewQuartPlot(2, expon)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp1, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp1.Title.Text = \"Quartile Plot\"\n\tp1.Y.Label.Text = \"plotter.Values\"\n\tp1.Add(qp1, qp2, qp3)\n\n\tp1.NominalX(\"Uniform\\nDistribution\", \"Normal\\nDistribution\",\n\t\t\"Exponential\\nDistribution\")\n\n\terr = p1.Save(200, 200, \"testdata/verticalQuartPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tqp1.Horizontal = true\n\tqp2.Horizontal = true\n\tqp3.Horizontal = true\n\n\tp2, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp2.Title.Text = \"Quartile Plot\"\n\tp2.X.Label.Text = \"plotter.Values\"\n\tp2.Add(qp1, qp2, qp3)\n\n\tp2.NominalY(\"Uniform\\nDistribution\", \"Normal\\nDistribution\",\n\t\t\"Exponential\\nDistribution\")\n\n\terr = p2.Save(200, 200, \"testdata/horizontalQuartPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tp3, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp3.Title.Text = \"Box Plot\"\n\tp3.Y.Label.Text = \"plotter.Values\"\n\n\tw := vg.Points(10)\n\tfor x := 0.0; x < 3.0; x++ {\n\t\tb0, err := plotter.NewQuartPlot(x, uniform)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb0.Offset = -w\n\t\tb1, err := plotter.NewQuartPlot(x, normal)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb2, err := plotter.NewQuartPlot(x, expon)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\tb2.Offset = w\n\t\tp3.Add(b0, b1, b2)\n\t}\n\tp3.Add(plotter.NewGlyphBoxes())\n\n\tp3.NominalX(\"Group 0\", \"Group 1\", \"Group 2\")\n\n\terr = p3.Save(200, 200, \"testdata/groupedQuartPlot.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"Sankey", Abbrev:"SG", Name:"Grouped", Doc:"ExampleSankey_grouped creates a sankey diagram with grouped flows.\nThe output can be found at https://github.com/gonum/plot/blob/master/plotter/testdata/sankeyGrouped_golden.png.\n", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"image/color\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgimg\"\n)\n\nfunc main() {\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tc := vgimg.New(vg.Points(300), vg.Points(180))\n\tdc := draw.New(c)\n\n\t// Define the stock categories\n\tconst (\n\t\ttreeType int = iota\n\t\tconsumer\n\t\tfate\n\t)\n\tcategoryLabels := []string{\"Tree type\", \"Consumer\", \"Fate\"}\n\n\tflows := []plotter.Flow{\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Mohamed\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            5,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Mohamed\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Mohamed\",\n\t\t\tGroup:            \"Lychees\",\n\t\t\tValue:            2,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Sofia\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Sofia\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            4,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Sofia\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Wei\",\n\t\t\tGroup:            \"Lychees\",\n\t\t\tValue:            6,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Wei\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            4,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Lychees\",\n\t\t\tValue:            2,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Sofia\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            4,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Sofia\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Sofia\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Wei\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Lychees\",\n\t\t\tValue:            6,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Wei\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            2,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Wei\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Apples\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Dates\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tGroup:            \"Lychees\",\n\t\t\tValue:            0.3,\n\t\t},\n\t}\n\n\tsankey, err := plotter.NewSankey(flows...)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tsankey.FlowStyle = func(group string) (color.Color, draw.LineStyle) {\n\t\tswitch group {\n\t\tcase \"Lychees\":\n\t\t\treturn color.NRGBA{R: 242, G: 169, B: 178, A: 100}, sankey.LineStyle\n\t\tcase \"Apples\":\n\t\t\treturn color.NRGBA{R: 91, G: 194, B: 54, A: 100}, sankey.LineStyle\n\t\tcase \"Dates\":\n\t\t\treturn color.NRGBA{R: 112, G: 22, B: 0, A: 100}, sankey.LineStyle\n\t\tdefault:\n\t\t\tpanic(fmt.Errorf(\"invalid group %s\", group))\n\t\t}\n\t}\n\n\tsankey.StockStyle = func(label string, category int) (string, draw.TextStyle, vg.Length, vg.Length, color.Color, draw.LineStyle) {\n\t\tif label == \"Small\" && category == treeType {\n\n\t\t\tts := sankey.TextStyle\n\t\t\tts.Rotation = 0.0\n\t\t\tts.XAlign = draw.XRight\n\t\t\tls := sankey.LineStyle\n\t\t\tls.Color = color.White\n\t\t\txOff := -sankey.StockBarWidth / 2\n\t\t\tyOff := vg.Length(0)\n\t\t\treturn \"small\", ts, xOff, yOff, color.Black, ls\n\t\t}\n\t\tif label == \"LargeLargeLargeLargeLargeLargeLargeLargeLarge\" && category == treeType {\n\n\t\t\tmin, max, err := sankey.Stockplotter.Range(label, category)\n\t\t\tif err != nil {\n\t\t\t\tlog.Panic(err)\n\t\t\t}\n\t\t\t_, yTr := p.Transforms(&dc)\n\t\t\tbarHeight := yTr(max) - yTr(min)\n\t\t\tif sankey.TextStyle.Font.Width(label) > barHeight {\n\t\t\t\treturn \"large\", sankey.TextStyle, 0, 0, sankey.Color, sankey.LineStyle\n\t\t\t}\n\t\t}\n\t\treturn label, sankey.TextStyle, 0, 0, sankey.Color, sankey.LineStyle\n\t}\n\n\tsankey.Color = color.White\n\n\tp.Add(sankey)\n\tp.Y.Label.Text = \"Number of fruit pieces\"\n\tp.NominalX(categoryLabels...)\n\n\tlegendLabels, thumbs := sankey.Thumbnailers()\n\tfor i, l := range legendLabels {\n\t\tt := thumbs[i]\n\t\tp.Legend.Add(l, t)\n\t}\n\tp.Legend.Top = true\n\tp.X.Max = 3.05\n\n\tp.Add(plotter.NewGlyphBoxes())\n\n\tp.Draw(dc)\n\tpngimg := vgimg.PngCanvas{Canvas: c}\n\tf, err := os.Create(\"testdata/sankeyGrouped.png\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tif _, err = pngimg.WriteTo(f); err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:"https://raw.githubusercontent.com/gonum/plot/master/plotter/testdata/sankeyGrouped_golden.png"},
        {PkgName:"plotter", Type:"Sankey", Abbrev:"SS", Name:"Simple", Doc:"ExampleSankey_sample creates a simple sankey diagram.\nThe output can be found at https://github.com/gonum/plot/blob/master/plotter/testdata/sankeySimple_golden.png.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\t// Define the stock categories\n\tconst (\n\t\ttreeType int = iota\n\t\tconsumer\n\t\tfate\n\t)\n\tcategoryLabels := []string{\"Tree type\", \"Consumer\", \"Fate\"}\n\n\tflows := []plotter.Flow{\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Large\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Mohamed\",\n\t\t\tValue:            5,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Mohamed\",\n\t\t\tValue:            2,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Large\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Sofia\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Sofia\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Large\",\n\t\t\tReceptorCategory: consumer,\n\t\t\tReceptorLabel:    \"Wei\",\n\t\t\tValue:            6,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tValue:            6,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Mohamed\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Sofia\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tValue:            3,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Sofia\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tValue:            0.5,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Wei\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Eaten\",\n\t\t\tValue:            5,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   consumer,\n\t\t\tSourceLabel:      \"Wei\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Large\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tValue:            1,\n\t\t},\n\t\tplotter.Flow{\n\t\t\tSourceCategory:   treeType,\n\t\t\tSourceLabel:      \"Small\",\n\t\t\tReceptorCategory: fate,\n\t\t\tReceptorLabel:    \"Waste\",\n\t\t\tValue:            0.3,\n\t\t},\n\t}\n\n\tsankey, err := plotter.NewSankey(flows...)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Add(sankey)\n\tp.Y.Label.Text = \"Number of apples\"\n\tp.NominalX(categoryLabels...)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:"https://raw.githubusercontent.com/gonum/plot/master/plotter/testdata/sankeySimple_golden.png"},
        {PkgName:"plotter", Type:"Scatter", Abbrev:"S", Name:"", Doc:"ExampleScatter draws some scatter points, a line,\nand a line with points.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\trandomPoints := func(n int) XYs {\n\t\tpts := make(XYs, n)\n\t\tfor i := range pts {\n\t\t\tif i == 0 {\n\t\t\t\tpts[i].X = rnd.Float64()\n\t\t\t} else {\n\t\t\t\tpts[i].X = pts[i-1].X + rnd.Float64()\n\t\t\t}\n\t\t\tpts[i].Y = pts[i].X + 10*rnd.Float64()\n\t\t}\n\t\treturn pts\n\t}\n\n\tn := 15\n\tscatterData := randomPoints(n)\n\tlineData := randomPoints(n)\n\tlinePointsData := randomPoints(n)\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Points Example\"\n\tp.X.Label.Text = \"X\"\n\tp.Y.Label.Text = \"Y\"\n\tp.Add(plotter.NewGrid())\n\n\ts, err := plotter.NewScatter(scatterData)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\ts.GlyphStyle.Color = color.RGBA{R: 255, B: 128, A: 255}\n\ts.GlyphStyle.Radius = vg.Points(3)\n\n\tl, err := plotter.NewLine(lineData)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tl.LineStyle.Width = vg.Points(1)\n\tl.LineStyle.Dashes = []vg.Length{vg.Points(5), vg.Points(5)}\n\tl.LineStyle.Color = color.RGBA{B: 255, A: 255}\n\n\tlpLine, lpPoints, err := plotter.NewLinePoints(linePointsData)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tlpLine.Color = color.RGBA{G: 255, A: 255}\n\tlpPoints.Shape = draw.CircleGlyph{}\n\tlpPoints.Color = color.RGBA{R: 255, A: 255}\n\n\tp.Add(s, l, lpLine, lpPoints)\n\tp.Legend.Add(\"scatter\", s)\n\tp.Legend.Add(\"line\", l)\n\tp.Legend.Add(\"line points\", lpLine, lpPoints)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"", Abbrev:"R", Name:"Rotation", Doc:"Example_rotation gives some examples of rotating text.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\tn := 100\n\txmax := 2 * math.Pi\n\n\tsin := func(n int, xmax float64) XYs {\n\t\txy := make(XYs, n)\n\t\tfor i := 0; i < n; i++ {\n\t\t\txy[i].X = xmax / float64(n) * float64(i)\n\t\t\txy[i].Y = math.Sin(xy[i].X) * 100\n\t\t}\n\t\treturn xy\n\t}\n\n\tlinePoints := sin(n, xmax)\n\n\tlabelPoints := sin(8, xmax)\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Rotation Example\"\n\tp.X.Label.Text = \"X\"\n\tp.Y.Label.Text = \"100 × Sine X\"\n\n\tl, err := plotter.NewLine(linePoints)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tl.LineStyle.Width = vg.Points(1)\n\tl.LineStyle.Color = color.RGBA{B: 255, A: 255}\n\n\tlabelData := XYplotter.Labels{\n\t\tXYs:    labelPoints,\n\t\tLabels: []string{\"0\", \"pi/4\", \"pi/2\", \"3pi/4\", \"pi\", \"5pi/4\", \"3pi/2\", \"7pi/4\", \"2pi\"},\n\t}\n\n\tlabels, err := plotter.NewLabels(labelData)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tfor i := range labels.TextStyle {\n\t\tx := labels.XYs[i].X\n\n\t\tlabels.TextStyle[i].Rotation = math.Atan(math.Cos(x))\n\t\tlabels.TextStyle[i].XAlign = draw.XCenter\n\t\tlabels.TextStyle[i].YAlign = draw.YCenter\n\n\t\tif x >= math.Pi {\n\t\t\tlabels.TextStyle[i].YAlign = draw.YTop\n\t\t} else {\n\t\t\tlabels.TextStyle[i].YAlign = draw.YBottom\n\t\t}\n\t}\n\n\tp.Add(l, labels)\n\n\tp.Add(plotter.NewGlyphBoxes())\n\n\tp.NominalX(\"0\", \"The number 1\", \"Number 2\", \"The number 3\", \"Number 4\",\n\t\t\"The number 5\", \"Number 6\")\n\n\tp.X.Tick.Label.Rotation = math.Pi / 5\n\tp.X.Tick.Label.YAlign = draw.YCenter\n\tp.X.Tick.Label.XAlign = draw.XRight\n\n\tp.Y.Tick.Label.Rotation = math.Pi / 2\n\tp.Y.Tick.Label.XAlign = draw.XCenter\n\tp.Y.Tick.Label.YAlign = draw.YBottom\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
        {PkgName:"plotter", Type:"", Abbrev:"TS", Name:"TimeSeries", Doc:"Example_timeSeries draws a time series.\n", Code:"package main\n\nimport (\n\t\"bytes\"\n\t\"image/color\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/draw\"\n\t\"github.com/gonum/plot/vg/vgsvg\"\n\t\"honnef.co/go/js/dom\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\txticks := plot.TimeTicks{Format: \"2006-01-02\\n15:04\"}\n\n\trandomPoints := func(n int) XYs {\n\t\tconst (\n\t\t\tmonth = 1\n\t\t\tday   = 1\n\t\t\thour  = 1\n\t\t\tmin   = 1\n\t\t\tsec   = 1\n\t\t\tnsec  = 1\n\t\t)\n\t\tpts := make(XYs, n)\n\t\tfor i := range pts {\n\t\t\tdate := time.Date(2007+i, month, day, hour, min, sec, nsec, time.UTC).Unix()\n\t\t\tpts[i].X = float64(date)\n\t\t\tpts[i].Y = float64(pts[i].X+10*rnd.Float64()) * 1e-9\n\t\t}\n\t\treturn pts\n\t}\n\n\tn := 10\n\tdata := randomPoints(n)\n\n\tp, err := plot.New()\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tp.Title.Text = \"Time Series\"\n\tp.X.Tick.Marker = xticks\n\tp.Y.Label.Text = \"Number of Gophers\\n(Billions)\"\n\tp.Add(plotter.NewGrid())\n\n\tline, points, err := plotter.NewLinePoints(data)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tline.Color = color.RGBA{G: 255, A: 255}\n\tpoints.Shape = draw.CircleGlyph{}\n\tpoints.Color = color.RGBA{R: 255, A: 255}\n\n\tp.Add(line, points)\n\n\t// Normally, we would save the figure using plot.Save(), but here we are going\n\t// to directly save it in this webpage.\n\timg := vgsvg.New(vg.Points(400), vg.Points(300))\n\tp.Draw(draw.New(img))\n\tb := new(bytes.Buffer)\n\tif _, err = img.WriteTo(b); err != nil {\n\t\tlog.Panic(err)\n\t}\n\tplotWindow := dom.GetWindow().Document().GetElementByID(\"plot_window\").(*dom.HTMLDivElement)\n\tplotWindow.SetInnerHTML(string(b.Bytes()))\n\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n}\n", Img:""},
    },
    "plot/plotutil": {
        {PkgName:"plotutil", Type:"ErrorPoints", Abbrev:"EP", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/plotutil\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\tn, m := 5, 10\n\tpts := make([]plotter.XYer, n)\n\tfor i := range pts {\n\t\txys := make(plotter.XYs, m)\n\t\tpts[i] = xys\n\t\tcenter := float64(i)\n\t\tfor j := range xys {\n\t\t\txys[j].X = center + (rnd.Float64() - 0.5)\n\t\t\txys[j].Y = center + (rnd.Float64() - 0.5)\n\t\t}\n\t}\n\n\tplt, err := plot.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmean95, err := plotutil.NewErrorPoints(MeanAndConf95, pts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tmedMinMax, err := plotutil.NewErrorPoints(MedianAndMinMax, pts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = plotutil.AddLinePoints(plt,\n\t\t\"mean and 95% confidence\", mean95,\n\t\t\"median and minimum and maximum\", medMinMax)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := plotutil.AddErrorBars(plt, mean95, medMinMax); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := plotutil.AddScatters(plt, pts[0], pts[1], pts[2], pts[3], pts[4]); err != nil {\n\t\tpanic(err)\n\t}\n\n\tplt.Save(4, 4, \"centroids.png\")\n}\n", Img:""},
        {PkgName:"main", Type:"", Abbrev:"E", Name:"Errpoints", Doc:"Example_errpoints draws some error points.\n", Code:"package main\n\nimport (\n\t\"math/rand\"\n\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/plotutil\"\n)\n\nfunc main() {\n\trnd := rand.New(rand.NewSource(1))\n\n\tn, m := 5, 10\n\tpts := make([]plotter.XYer, n)\n\tfor i := range pts {\n\t\txys := make(plotter.XYs, m)\n\t\tpts[i] = xys\n\t\tcenter := float64(i)\n\t\tfor j := range xys {\n\t\t\txys[j].X = center + (rnd.Float64() - 0.5)\n\t\t\txys[j].Y = center + (rnd.Float64() - 0.5)\n\t\t}\n\t}\n\n\tplt, err := plot.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmean95, err := plotutil.NewErrorPoints(plotutil.MeanAndConf95, pts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tmedMinMax, err := plotutil.NewErrorPoints(plotutil.MedianAndMinMax, pts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tplotutil.AddLinePoints(plt,\n\t\t\"mean and 95% confidence\", mean95,\n\t\t\"median and minimum and maximum\", medMinMax)\n\tif err := plotutil.AddErrorBars(plt, mean95, medMinMax); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := plotutil.AddScatters(plt, pts[0], pts[1], pts[2], pts[3], pts[4]); err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn plt\n}\n", Img:""},
        {PkgName:"main", Type:"", Abbrev:"SAC", Name:"StackedAreaChart", Doc:"An example of making a stacked area chart.\n", Code:"package main\n\nimport (\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/plotutil\"\n)\n\nfunc main() {\n\tp, err := plot.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tp.Title.Text = \"Example: Software Version Comparison\"\n\tp.X.Label.Text = \"Date\"\n\tp.Y.Label.Text = \"Users (in thousands)\"\n\n\tp.Legend.Top = true\n\tp.Legend.Left = true\n\n\tvals := []plotter.Values{\n\t\tplotter.Values{0.02, 0.015, 0, 0, 0, 0, 0},\n\t\tplotter.Values{0, 0.48, 0.36, 0.34, 0.32, 0.32, 0.28},\n\t\tplotter.Values{0, 0, 0.87, 1.4, 0.64, 0.32, 0.28},\n\t\tplotter.Values{0, 0, 0, 1.26, 0.34, 0.12, 0.09},\n\t\tplotter.Values{0, 0, 0, 0, 2.48, 2.68, 2.13},\n\t\tplotter.Values{0, 0, 0, 0, 0, 1.32, 0.54},\n\t\tplotter.Values{0, 0, 0, 0, 0, 0.68, 5.67},\n\t}\n\n\terr = plotutil.AddStackedAreaPlots(p, plotter.Values{2007, 2008, 2009, 2010, 2011, 2012, 2013},\n\t\t\"Version 3.0\",\n\t\tstackValues{vs: vals[0:7]},\n\t\t\"Version 2.1\",\n\t\tstackValues{vs: vals[0:6]},\n\t\t\"Version 2.0.1\",\n\t\tstackValues{vs: vals[0:5]},\n\t\t\"Version 2.0\",\n\t\tstackValues{vs: vals[0:4]},\n\t\t\"Version 1.1\",\n\t\tstackValues{vs: vals[0:3]},\n\t\t\"Version 1.0\",\n\t\tstackValues{vs: vals[0:2]},\n\t\t\"Beta\",\n\t\tstackValues{vs: vals[0:1]},\n\t)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn p\n}\n", Img:""},
    },
    "plot/vg/vgtex": {
        {PkgName:"vgtex", Type:"", Abbrev:"", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/vg\"\n\t\"github.com/gonum/plot/vg/vgtex\"\n)\n\nfunc main() {\n\tscatter, err := plotter.NewScatter(plotter.XYs{{1, 1}, {0, 1}, {0, 0}})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tp, err := plot.vgtex.New()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tp.Add(scatter)\n\n\tp.Title.Text = `A scatter plot: $\\sqrt{\\frac{e^{3i\\pi}}{2\\cos 3\\pi}}$`\n\tp.X.Label.Text = `$x = \\eta$`\n\tp.Y.Label.Text = `$y$ is some $\\Phi$`\n\n\tc := vgtex.NewDocument(5*vg.Centimeter, 5*vg.Centimeter)\n\tp.Draw(draw.vgtex.New(c))\n\tc.FillString(p.Title.Font, vg.Point{2.5 * vg.Centimeter, 2.5 * vg.Centimeter}, \"x\")\n\n\tf, err := os.Create(\"testdata/scatter.tex\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer f.Close()\n\n\tif _, err = c.WriteTo(f); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n", Img:""},
    },
    "stat": {
        {PkgName:"stat_test", Type:"CanonicalCorrelations", Abbrev:"CC", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gonum/floats\"\n\t\"github.com/gonum/matrix/mat64\"\n\t\"github.com/gonum/stat\"\n)\n\n// symView is a helper for getting a View of a SymDense.\ntype symView struct {\n\tsym\t*mat64.SymDense\n\n\ti, j, r, c\tint\n}\n\nfunc (s symView) Dims() (r, c int)\t{ return s.r, s.c }\n\nfunc (s symView) At(i, j int) float64 {\n\tif i < 0 || s.r <= i {\n\t\tpanic(\"i out of bounds\")\n\t}\n\tif j < 0 || s.c <= j {\n\t\tpanic(\"j out of bounds\")\n\t}\n\treturn s.sym.At(s.i+i, s.j+j)\n}\n\nfunc (s symView) T() mat64.Matrix\t{ return mat64.Transpose{s} }\n\nfunc main() {\n\t// This example is directly analogous to Example 3.5 on page 87 of\n\t// Koch, Inge. Analysis of multivariate and high-dimensional data.\n\t// Vol. 32. Cambridge University Press, 2013. ISBN: 9780521887939\n\n\t// bostonData is the Boston Housing Data of Harrison and Rubinfeld (1978)\n\tn, _ := bostonData.Dims()\n\tvar xd, yd = 7, 4\n\t// The variables (columns) of bostonData can be partitioned into two sets:\n\t// those that deal with environmental/social variables (xdata), and those\n\t// that contain information regarding the individual (ydata). Because the\n\t// variables can be naturally partitioned in this way, these data are\n\t// appropriate for canonical correlation analysis. The columns (variables)\n\t// of xdata are, in order:\n\t//  per capita crime rate by town,\n\t//  proportion of non-retail business acres per town,\n\t//  nitric oxide concentration (parts per 10 million),\n\t//  weighted distances to Boston employment centres,\n\t//  index of accessibility to radial highways,\n\t//  pupil-teacher ratio by town, and\n\t//  proportion of blacks by town.\n\txdata := bostonData.Slice(0, n, 0, xd)\n\n\t// The columns (variables) of ydata are, in order:\n\t//  average number of rooms per dwelling,\n\t//  proportion of owner-occupied units built prior to 1940,\n\t//  full-value property-tax rate per $10000, and\n\t//  median value of owner-occupied homes in $1000s.\n\tydata := bostonData.Slice(0, n, xd, xd+yd)\n\n\t// For comparison, calculate the correlation matrix for the original data.\n\tvar cor mat64.SymDense\n\tstat.CorrelationMatrix(&cor, bostonData, nil)\n\n\t// Extract just those correlations that are between xdata and ydata.\n\tvar corRaw = symView{sym: &cor, i: 0, j: xd, r: xd, c: yd}\n\n\t// Note that the strongest correlation between individual variables is 0.91\n\t// between the 5th variable of xdata (index of accessibility to radial\n\t// highways) and the 3rd variable of ydata (full-value property-tax rate per\n\t// $10000).\n\tfmt.Printf(\"corRaw = %.4f\", mat64.Formatted(corRaw, mat64.Prefix(\"         \")))\n\n\t// Calculate the canonical correlations.\n\tvar cc stat.CC\n\terr := cc.CanonicalCorrelations(xdata, ydata, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Unpack cc.\n\tccors := cc.Corrs(nil)\n\tpVecs := cc.Left(nil, true)\n\tqVecs := cc.Right(nil, true)\n\tphiVs := cc.Left(nil, false)\n\tpsiVs := cc.Right(nil, false)\n\n\t// Canonical Correlation Matrix, or the correlations between the sphered\n\t// data.\n\tvar corSph mat64.Dense\n\tcorSph.Clone(pVecs)\n\tcol := make([]float64, xd)\n\tfor j := 0; j < yd; j++ {\n\t\tmat64.Col(col, j, &corSph)\n\t\tfloats.Scale(ccors[j], col)\n\t\tcorSph.SetCol(j, col)\n\t}\n\tcorSph.Product(&corSph, qVecs.T())\n\tfmt.Printf(\"\\n\\ncorSph = %.4f\", mat64.Formatted(&corSph, mat64.Prefix(\"         \")))\n\n\t// Canonical Correlations. Note that the first canonical correlation is\n\t// 0.95, stronger than the greatest correlation in the original data, and\n\t// much stronger than the greatest correlation in the sphered data.\n\tfmt.Printf(\"\\n\\nccors = %.4f\", ccors)\n\n\t// Left and right eigenvectors of the canonical correlation matrix.\n\tfmt.Printf(\"\\n\\npVecs = %.4f\", mat64.Formatted(pVecs, mat64.Prefix(\"        \")))\n\tfmt.Printf(\"\\n\\nqVecs = %.4f\", mat64.Formatted(qVecs, mat64.Prefix(\"        \")))\n\n\t// Canonical Correlation Transforms. These can be useful as they represent\n\t// the canonical variables as linear combinations of the original variables.\n\tfmt.Printf(\"\\n\\nphiVs = %.4f\", mat64.Formatted(phiVs, mat64.Prefix(\"        \")))\n\tfmt.Printf(\"\\n\\npsiVs = %.4f\", mat64.Formatted(psiVs, mat64.Prefix(\"        \")))\n\n}\n", Img:""},
        {PkgName:"stat_test", Type:"PrincipalComponents", Abbrev:"PC", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"github.com/gonum/matrix/mat64\"\n\t\"github.com/gonum/stat\"\n\t\"fmt\"\n)\n\nfunc main() {\n\t// iris is a truncated sample of the Fisher's Iris dataset.\n\tn := 10\n\td := 4\n\tiris := mat64.NewDense(n, d, []float64{\n\t\t5.1, 3.5, 1.4, 0.2,\n\t\t4.9, 3.0, 1.4, 0.2,\n\t\t4.7, 3.2, 1.3, 0.2,\n\t\t4.6, 3.1, 1.5, 0.2,\n\t\t5.0, 3.6, 1.4, 0.2,\n\t\t5.4, 3.9, 1.7, 0.4,\n\t\t4.6, 3.4, 1.4, 0.3,\n\t\t5.0, 3.4, 1.5, 0.2,\n\t\t4.4, 2.9, 1.4, 0.2,\n\t\t4.9, 3.1, 1.5, 0.1,\n\t})\n\n\t// Calculate the principal component direction vectors\n\t// and variances.\n\tvar pc stat.PC\n\tok := pc.PrincipalComponents(iris, nil)\n\tif !ok {\n\t\treturn\n\t}\n\tfmt.Printf(\"variances = %.4f\\n\\n\", pc.Vars(nil))\n\n\t// Project the data onto the first 2 principal components.\n\tk := 2\n\tvar proj mat64.Dense\n\tproj.Mul(iris, pc.Vectors(nil).Slice(0, d, 0, k))\n\n\tfmt.Printf(\"proj = %.4f\", mat64.Formatted(&proj, mat64.Prefix(\"       \")))\n\n}\n", Img:""},
        {PkgName:"stat_test", Type:"ROC", Abbrev:"ROCAUC", Name:"AUC", Doc:"", Code:"package main\n\nimport (\n\t\"github.com/gonum/stat\"\n\t\"fmt\"\n\t\"github.com/gonum/integrate\"\n)\n\nfunc main() {\n\ty := []float64{0.1, 0.35, 0.4, 0.8}\n\tclasses := []bool{true, false, true, false}\n\n\ttpr, fpr := stat.ROC(0, y, classes, nil)\n\t// compute Area Under Curve\n\tauc := integrate.Trapezoidal(fpr, tpr)\n\tfmt.Printf(\"true  positive rate: %v\\n\", tpr)\n\tfmt.Printf(\"false positive rate: %v\\n\", fpr)\n\tfmt.Printf(\"auc: %v\\n\", auc)\n\n}\n", Img:""},
        {PkgName:"stat_test", Type:"ROC", Abbrev:"ROCU", Name:"Unweighted", Doc:"", Code:"package main\n\nimport (\n\t\"github.com/gonum/stat\"\n\t\"fmt\"\n)\n\nfunc main() {\n\ty := []float64{0, 3, 5, 6, 7.5, 8}\n\tclasses := []bool{true, false, true, false, false, false}\n\tweights := []float64{4, 1, 6, 3, 2, 2}\n\n\ttpr, fpr := stat.ROC(0, y, classes, weights)\n\tfmt.Printf(\"true  positive rate: %v\\n\", tpr)\n\tfmt.Printf(\"false positive rate: %v\\n\", fpr)\n\n}\n", Img:""},
        {PkgName:"stat_test", Type:"ROC", Abbrev:"ROCW", Name:"Weighted", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\ty := []float64{0, 3, 5, 6, 7.5, 8}\n\tclasses := []bool{true, false, true, false, false, false}\n\n\ttpr, fpr := stat.ROC(0, y, classes, nil)\n\tfmt.Printf(\"true  positive rate: %v\\n\", tpr)\n\tfmt.Printf(\"false positive rate: %v\\n\", fpr)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"CircularMean", Abbrev:"CM", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tx := []float64{0, 0.25 * math.Pi, 0.75 * math.Pi}\n\tweights := []float64{1, 2, 2.5}\n\tcmean := stat.Circularstat.Mean(x, weights)\n\n\tfmt.Printf(\"The circular mean is %.5f.\\n\", cmean)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Correlation", Abbrev:"C", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := []float64{8, -3, 7, 8, -4}\n\ty := []float64{10, 5, 6, 3, -1}\n\tw := []float64{2, 1.5, 3, 3, 2}\n\n\tfmt.Println(\"Correlation computes the degree to which two datasets move together\")\n\tfmt.Println(\"about their mean. For example, x and y above move similarly.\")\n\n\tc := stat.Correlation(x, y, w)\n\tfmt.Printf(\"Correlation is %.5f\\n\", c)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Covariance", Abbrev:"C", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tfmt.Println(\"Covariance computes the degree to which datasets move together\")\n\tfmt.Println(\"about their mean.\")\n\tx := []float64{8, -3, 7, 8, -4}\n\ty := []float64{10, 2, 2, 4, 1}\n\tcov := stat.Covariance(x, y, nil)\n\tfmt.Printf(\"Cov = %.4f\\n\", cov)\n\tfmt.Println(\"If datasets move perfectly together, the variance equals the covariance\")\n\ty2 := []float64{12, 1, 11, 12, 0}\n\tcov2 := stat.Covariance(x, y2, nil)\n\tvarX := stat.Variance(x, nil)\n\tfmt.Printf(\"Cov2 is %.4f, VarX is %.4f\", cov2, varX)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Entropy", Abbrev:"E", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\n\tp := []float64{0.05, 0.1, 0.9, 0.05}\n\tentP := stat.Entropy(p)\n\n\tq := []float64{0.2, 0.4, 0.25, 0.15}\n\tentQ := stat.Entropy(q)\n\n\tr := []float64{0.2, 0, 0, 0.5, 0, 0.2, 0.1, 0, 0, 0}\n\tentR := stat.Entropy(r)\n\n\ts := []float64{0, 0, 1, 0}\n\tentS := stat.Entropy(s)\n\n\tfmt.Println(\"Entropy is a measure of the amount of uncertainty in a distribution\")\n\tfmt.Printf(\"The second bin of p is very likely to occur. It's entropy is %.4f\\n\", entP)\n\tfmt.Printf(\"The distribution of q is more spread out. It's entropy is %.4f\\n\", entQ)\n\tfmt.Println(\"Adding buckets with zero probability does not change the entropy.\")\n\tfmt.Printf(\"The entropy of r is: %.4f\\n\", entR)\n\tfmt.Printf(\"A distribution with no uncertainty has entropy %.4f\\n\", entS)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"ExKurtosis", Abbrev:"EK", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tfmt.Println(`Kurtosis is a measure of the 'peakedness' of a distribution, and the\nexcess kurtosis is the kurtosis above or below that of the standard normal\ndistribution`)\n\tx := []float64{5, 4, -3, -2}\n\tkurt := stat.ExKurtosis(x, nil)\n\tfmt.Printf(\"ExKurtosis = %.5f\\n\", kurt)\n\tweights := []float64{1, 2, 3, 5}\n\twKurt := stat.ExKurtosis(x, weights)\n\tfmt.Printf(\"Weighted ExKurtosis is %.4f\", wKurt)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"GeometricMean", Abbrev:"GM", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tx := []float64{8, 2, 9, 15, 4}\n\tweights := []float64{2, 2, 6, 7, 1}\n\tmean := stat.Mean(x, weights)\n\tgmean := stat.Geometricstat.Mean(x, weights)\n\n\tlogx := make([]float64, len(x))\n\tfor i, v := range x {\n\t\tlogx[i] = math.Log(v)\n\t}\n\texpMeanLog := math.Exp(stat.Mean(logx, weights))\n\tfmt.Printf(\"The arithmetic mean is %.4f, but the geometric mean is %.4f.\\n\", mean, gmean)\n\tfmt.Printf(\"The exponential of the mean of the logs is %.4f\\n\", expMeanLog)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"HarmonicMean", Abbrev:"HM", Name:"", Doc:"", Code:"package main\n\nimport \"fmt\"\n\nfunc main() {\n\tx := []float64{8, 2, 9, 15, 4}\n\tweights := []float64{2, 2, 6, 7, 1}\n\tmean := stat.Mean(x, weights)\n\thmean := stat.Harmonicstat.Mean(x, weights)\n\n\tfmt.Printf(\"The arithmetic mean is %.5f, but the harmonic mean is %.4f.\\n\", mean, hmean)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Histogram", Abbrev:"H", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := make([]float64, 101)\n\tfor i := range x {\n\t\tx[i] = 1.1 * float64(i)\n\t}\n\tdividers := []float64{0, 7, 20, 100, 1000}\n\tfmt.Println(`Histogram counts the amount of data in the bins specified by\nthe dividers. In this data set, there are 7 data points less than 7 (between dividers[0]\nand dividers[1]), 12 data points between 7 and 20 (dividers[1] and dividers[2]),\nand 0 data points above 1000. Since dividers has length 5, there will be 4 bins.`)\n\thist := stat.Histogram(nil, dividers, x, nil)\n\tfmt.Printf(\"Hist = %v\\n\", hist)\n\n\tfmt.Println()\n\tfmt.Println(\"For ease, the floats Span function can be used to set the dividers\")\n\tnBins := 10\n\tdividers = make([]float64, nBins+1)\n\tmin := floats.Min(x)\n\tmax := floats.Max(x)\n\n\tmax += 1\n\tfloats.Span(dividers, min, max)\n\n\thist = stat.Histogram(nil, dividers, x, nil)\n\tfmt.Printf(\"Hist = %v\\n\", hist)\n\tfmt.Println()\n\tfmt.Println(`Histogram also works with weighted data, and allows reusing of\nthe count field in order to avoid extra garbage`)\n\tweights := make([]float64, len(x))\n\tfor i := range weights {\n\t\tweights[i] = float64(i + 1)\n\t}\n\tstat.Histogram(hist, dividers, x, weights)\n\tfmt.Printf(\"Weighted Hist = %v\\n\", hist)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"KullbackLeibler", Abbrev:"KL", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\n\tp := []float64{0.05, 0.1, 0.9, 0.05}\n\tq := []float64{0.2, 0.4, 0.25, 0.15}\n\ts := []float64{0, 0, 1, 0}\n\n\tklPQ := stat.KullbackLeibler(p, q)\n\tklPS := stat.KullbackLeibler(p, s)\n\tklPP := stat.KullbackLeibler(p, p)\n\n\tfmt.Println(\"Kullback-Leibler is one measure of the difference between two distributions\")\n\tfmt.Printf(\"The K-L distance between p and q is %.4f\\n\", klPQ)\n\tfmt.Println(\"It is impossible for s and p to be the same distribution, because\")\n\tfmt.Println(\"the first bucket has zero probability in s and non-zero in p. Thus,\")\n\tfmt.Printf(\"the K-L distance between them is %.4f\\n\", klPS)\n\tfmt.Printf(\"The K-L distance between identical distributions is %.4f\\n\", klPP)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Mean", Abbrev:"M", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := []float64{8.2, -6, 5, 7}\n\tmean := stat.Mean(x, nil)\n\tfmt.Printf(\"The mean of the samples is %.4f\\n\", mean)\n\tw := []float64{2, 6, 3, 5}\n\tweightedMean := stat.Mean(x, w)\n\tfmt.Printf(\"The weighted mean of the samples is %.4f\\n\", weightedMean)\n\tx2 := []float64{8.2, 8.2, -6, -6, -6, -6, -6, -6, 5, 5, 5, 7, 7, 7, 7, 7}\n\tmean2 := stat.Mean(x2, nil)\n\tfmt.Printf(\"The mean of x2 is %.4f\\n\", mean2)\n\tfmt.Println(\"The weights act as if there were more samples of that number\")\n\n}\n", Img:""},
        {PkgName:"stat", Type:"StdDev", Abbrev:"SD", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := []float64{8, 2, -9, 15, 4}\n\tstdev := stat.StdDev(x, nil)\n\tfmt.Printf(\"The standard deviation of the samples is %.4f\\n\", stdev)\n\n\tweights := []float64{2, 2, 6, 7, 1}\n\tweightedStdev := stat.StdDev(x, weights)\n\tfmt.Printf(\"The weighted standard deviation of the samples is %.4f\\n\", weightedStdev)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"StdErr", Abbrev:"SE", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/floats\"\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := []float64{8, 2, -9, 15, 4}\n\tweights := []float64{2, 2, 6, 7, 1}\n\tmean := stat.Mean(x, weights)\n\tstdev := stat.StdDev(x, weights)\n\tnSamples := floats.Sum(weights)\n\tstdErr := stat.StdErr(stdev, nSamples)\n\tfmt.Printf(\"The standard deviation is %.4f and there are %g samples, so the mean\\nis likely %.4f ± %.4f.\", stdev, nSamples, mean, stdErr)\n\n}\n", Img:""},
        {PkgName:"stat", Type:"Variance", Abbrev:"V", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gonum/stat\"\n)\n\nfunc main() {\n\tx := []float64{8, 2, -9, 15, 4}\n\tvariance := stat.Variance(x, nil)\n\tfmt.Printf(\"The variance of the samples is %.4f\\n\", variance)\n\n\tweights := []float64{2, 2, 6, 7, 1}\n\tweightedVariance := stat.Variance(x, weights)\n\tfmt.Printf(\"The weighted variance of the samples is %.4f\\n\", weightedVariance)\n\n}\n", Img:""},
    },
    "stat/distuv": {
        {PkgName:"distuv_test", Type:"Normal", Abbrev:"N", Name:"", Doc:"", Code:"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gonum/stat\"\n\t\"github.com/gonum/stat/distuv\"\n)\n\nfunc main() {\n\t// Create a normal distribution\n\tdist := distuv.Normal{\n\t\tMu:\t2,\n\t\tSigma:\t5,\n\t}\n\n\tdata := make([]float64, 1e5)\n\n\t// Draw some random values from the standard normal distribution\n\tfor i := range data {\n\t\tdata[i] = dist.Rand()\n\t}\n\n\tmean, std := stat.MeanStdDev(data, nil)\n\tmeanErr := stat.StdErr(std, float64(len(data)))\n\n\tfmt.Printf(\"mean= %1.1f ± %0.1v\\n\", mean, meanErr)\n\n}\n", Img:""},
    },
}
